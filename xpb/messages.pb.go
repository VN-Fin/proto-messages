// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: messages.proto

package xpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StockOHLCVMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Symbol     string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Resolution string  `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"` // e.g. "MIN", "HOUR1", "DAY"
	Open       float64 `protobuf:"fixed64,4,opt,name=open,proto3" json:"open,omitempty"`
	High       float64 `protobuf:"fixed64,5,opt,name=high,proto3" json:"high,omitempty"`
	Low        float64 `protobuf:"fixed64,6,opt,name=low,proto3" json:"low,omitempty"`
	Close      float64 `protobuf:"fixed64,7,opt,name=close,proto3" json:"close,omitempty"`
	Volume     float64 `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *StockOHLCVMessage) Reset() {
	*x = StockOHLCVMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockOHLCVMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockOHLCVMessage) ProtoMessage() {}

func (x *StockOHLCVMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockOHLCVMessage.ProtoReflect.Descriptor instead.
func (*StockOHLCVMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *StockOHLCVMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StockOHLCVMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockOHLCVMessage) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *StockOHLCVMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockOHLCVMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockOHLCVMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockOHLCVMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockOHLCVMessage) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type StockTopPriceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64     `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Symbol   string    `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Bp       []float64 `protobuf:"fixed64,3,rep,packed,name=bp,proto3" json:"bp,omitempty"` // bid prices
	Bq       []float64 `protobuf:"fixed64,4,rep,packed,name=bq,proto3" json:"bq,omitempty"` // bid quantities
	Ap       []float64 `protobuf:"fixed64,5,rep,packed,name=ap,proto3" json:"ap,omitempty"` // ask prices
	Aq       []float64 `protobuf:"fixed64,6,rep,packed,name=aq,proto3" json:"aq,omitempty"` // ask quantities
	TotalBid float64   `protobuf:"fixed64,7,opt,name=total_bid,json=totalBid,proto3" json:"total_bid,omitempty"`
	TotalAsk float64   `protobuf:"fixed64,8,opt,name=total_ask,json=totalAsk,proto3" json:"total_ask,omitempty"`
}

func (x *StockTopPriceMessage) Reset() {
	*x = StockTopPriceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockTopPriceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockTopPriceMessage) ProtoMessage() {}

func (x *StockTopPriceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockTopPriceMessage.ProtoReflect.Descriptor instead.
func (*StockTopPriceMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *StockTopPriceMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StockTopPriceMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockTopPriceMessage) GetBp() []float64 {
	if x != nil {
		return x.Bp
	}
	return nil
}

func (x *StockTopPriceMessage) GetBq() []float64 {
	if x != nil {
		return x.Bq
	}
	return nil
}

func (x *StockTopPriceMessage) GetAp() []float64 {
	if x != nil {
		return x.Ap
	}
	return nil
}

func (x *StockTopPriceMessage) GetAq() []float64 {
	if x != nil {
		return x.Aq
	}
	return nil
}

func (x *StockTopPriceMessage) GetTotalBid() float64 {
	if x != nil {
		return x.TotalBid
	}
	return 0
}

func (x *StockTopPriceMessage) GetTotalAsk() float64 {
	if x != nil {
		return x.TotalAsk
	}
	return 0
}

type StockTickMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Symbol string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price  float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Vol    float64 `protobuf:"fixed64,4,opt,name=vol,proto3" json:"vol,omitempty"`
	Side   string  `protobuf:"bytes,5,opt,name=side,proto3" json:"side,omitempty"`
}

func (x *StockTickMessage) Reset() {
	*x = StockTickMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockTickMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockTickMessage) ProtoMessage() {}

func (x *StockTickMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockTickMessage.ProtoReflect.Descriptor instead.
func (*StockTickMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

func (x *StockTickMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StockTickMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockTickMessage) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StockTickMessage) GetVol() float64 {
	if x != nil {
		return x.Vol
	}
	return 0
}

func (x *StockTickMessage) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

type StockForeignMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Symbol      string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TotalRoom   float64 `protobuf:"fixed64,3,opt,name=total_room,json=totalRoom,proto3" json:"total_room,omitempty"`
	CurrentRoom float64 `protobuf:"fixed64,4,opt,name=current_room,json=currentRoom,proto3" json:"current_room,omitempty"`
	BuyVol      float64 `protobuf:"fixed64,5,opt,name=buy_vol,json=buyVol,proto3" json:"buy_vol,omitempty"`
	SellVol     float64 `protobuf:"fixed64,6,opt,name=sell_vol,json=sellVol,proto3" json:"sell_vol,omitempty"`
	BuyVal      float64 `protobuf:"fixed64,7,opt,name=buy_val,json=buyVal,proto3" json:"buy_val,omitempty"`
	SellVal     float64 `protobuf:"fixed64,8,opt,name=sell_val,json=sellVal,proto3" json:"sell_val,omitempty"`
}

func (x *StockForeignMessage) Reset() {
	*x = StockForeignMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockForeignMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockForeignMessage) ProtoMessage() {}

func (x *StockForeignMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockForeignMessage.ProtoReflect.Descriptor instead.
func (*StockForeignMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

func (x *StockForeignMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StockForeignMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockForeignMessage) GetTotalRoom() float64 {
	if x != nil {
		return x.TotalRoom
	}
	return 0
}

func (x *StockForeignMessage) GetCurrentRoom() float64 {
	if x != nil {
		return x.CurrentRoom
	}
	return 0
}

func (x *StockForeignMessage) GetBuyVol() float64 {
	if x != nil {
		return x.BuyVol
	}
	return 0
}

func (x *StockForeignMessage) GetSellVol() float64 {
	if x != nil {
		return x.SellVol
	}
	return 0
}

func (x *StockForeignMessage) GetBuyVal() float64 {
	if x != nil {
		return x.BuyVal
	}
	return 0
}

func (x *StockForeignMessage) GetSellVal() float64 {
	if x != nil {
		return x.SellVal
	}
	return 0
}

type StockInfoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Symbol string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Open   float64 `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	High   float64 `protobuf:"fixed64,4,opt,name=high,proto3" json:"high,omitempty"`
	Low    float64 `protobuf:"fixed64,5,opt,name=low,proto3" json:"low,omitempty"`
	Close  float64 `protobuf:"fixed64,6,opt,name=close,proto3" json:"close,omitempty"`
	Avg    float64 `protobuf:"fixed64,7,opt,name=avg,proto3" json:"avg,omitempty"`
	Ceil   float64 `protobuf:"fixed64,8,opt,name=ceil,proto3" json:"ceil,omitempty"`
	Floor  float64 `protobuf:"fixed64,9,opt,name=floor,proto3" json:"floor,omitempty"`
	Prior  float64 `protobuf:"fixed64,10,opt,name=prior,proto3" json:"prior,omitempty"`
}

func (x *StockInfoMessage) Reset() {
	*x = StockInfoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockInfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockInfoMessage) ProtoMessage() {}

func (x *StockInfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockInfoMessage.ProtoReflect.Descriptor instead.
func (*StockInfoMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4}
}

func (x *StockInfoMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StockInfoMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockInfoMessage) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockInfoMessage) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockInfoMessage) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockInfoMessage) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockInfoMessage) GetAvg() float64 {
	if x != nil {
		return x.Avg
	}
	return 0
}

func (x *StockInfoMessage) GetCeil() float64 {
	if x != nil {
		return x.Ceil
	}
	return 0
}

func (x *StockInfoMessage) GetFloor() float64 {
	if x != nil {
		return x.Floor
	}
	return 0
}

func (x *StockInfoMessage) GetPrior() float64 {
	if x != nil {
		return x.Prior
	}
	return 0
}

type StockPriceBoardMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Symbol    string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price     float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Vol       float64 `protobuf:"fixed64,4,opt,name=vol,proto3" json:"vol,omitempty"`
	TotalVol  float64 `protobuf:"fixed64,5,opt,name=total_vol,json=totalVol,proto3" json:"total_vol,omitempty"`
	TotalVal  float64 `protobuf:"fixed64,6,opt,name=total_val,json=totalVal,proto3" json:"total_val,omitempty"`
	Change    float64 `protobuf:"fixed64,7,opt,name=change,proto3" json:"change,omitempty"`
	ChangePct float64 `protobuf:"fixed64,8,opt,name=change_pct,json=changePct,proto3" json:"change_pct,omitempty"`
}

func (x *StockPriceBoardMessage) Reset() {
	*x = StockPriceBoardMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockPriceBoardMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockPriceBoardMessage) ProtoMessage() {}

func (x *StockPriceBoardMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockPriceBoardMessage.ProtoReflect.Descriptor instead.
func (*StockPriceBoardMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{5}
}

func (x *StockPriceBoardMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StockPriceBoardMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockPriceBoardMessage) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StockPriceBoardMessage) GetVol() float64 {
	if x != nil {
		return x.Vol
	}
	return 0
}

func (x *StockPriceBoardMessage) GetTotalVol() float64 {
	if x != nil {
		return x.TotalVol
	}
	return 0
}

func (x *StockPriceBoardMessage) GetTotalVal() float64 {
	if x != nil {
		return x.TotalVal
	}
	return 0
}

func (x *StockPriceBoardMessage) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *StockPriceBoardMessage) GetChangePct() float64 {
	if x != nil {
		return x.ChangePct
	}
	return 0
}

type StockMarketIndexMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Symbol    string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name      string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Prior     float64 `protobuf:"fixed64,4,opt,name=prior,proto3" json:"prior,omitempty"`
	Value     float64 `protobuf:"fixed64,5,opt,name=value,proto3" json:"value,omitempty"`
	TotalVol  float64 `protobuf:"fixed64,6,opt,name=total_vol,json=totalVol,proto3" json:"total_vol,omitempty"`
	TotalVal  float64 `protobuf:"fixed64,7,opt,name=total_val,json=totalVal,proto3" json:"total_val,omitempty"`
	Advance   int64   `protobuf:"varint,8,opt,name=advance,proto3" json:"advance,omitempty"`
	Decline   int64   `protobuf:"varint,9,opt,name=decline,proto3" json:"decline,omitempty"`
	Nochange  int64   `protobuf:"varint,10,opt,name=nochange,proto3" json:"nochange,omitempty"`
	Ceil      int64   `protobuf:"varint,11,opt,name=ceil,proto3" json:"ceil,omitempty"`
	Floor     int64   `protobuf:"varint,12,opt,name=floor,proto3" json:"floor,omitempty"`
	Change    float64 `protobuf:"fixed64,13,opt,name=change,proto3" json:"change,omitempty"`
	ChangePct float64 `protobuf:"fixed64,14,opt,name=change_pct,json=changePct,proto3" json:"change_pct,omitempty"`
}

func (x *StockMarketIndexMessage) Reset() {
	*x = StockMarketIndexMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockMarketIndexMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockMarketIndexMessage) ProtoMessage() {}

func (x *StockMarketIndexMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockMarketIndexMessage.ProtoReflect.Descriptor instead.
func (*StockMarketIndexMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6}
}

func (x *StockMarketIndexMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StockMarketIndexMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockMarketIndexMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockMarketIndexMessage) GetPrior() float64 {
	if x != nil {
		return x.Prior
	}
	return 0
}

func (x *StockMarketIndexMessage) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StockMarketIndexMessage) GetTotalVol() float64 {
	if x != nil {
		return x.TotalVol
	}
	return 0
}

func (x *StockMarketIndexMessage) GetTotalVal() float64 {
	if x != nil {
		return x.TotalVal
	}
	return 0
}

func (x *StockMarketIndexMessage) GetAdvance() int64 {
	if x != nil {
		return x.Advance
	}
	return 0
}

func (x *StockMarketIndexMessage) GetDecline() int64 {
	if x != nil {
		return x.Decline
	}
	return 0
}

func (x *StockMarketIndexMessage) GetNochange() int64 {
	if x != nil {
		return x.Nochange
	}
	return 0
}

func (x *StockMarketIndexMessage) GetCeil() int64 {
	if x != nil {
		return x.Ceil
	}
	return 0
}

func (x *StockMarketIndexMessage) GetFloor() int64 {
	if x != nil {
		return x.Floor
	}
	return 0
}

func (x *StockMarketIndexMessage) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *StockMarketIndexMessage) GetChangePct() float64 {
	if x != nil {
		return x.ChangePct
	}
	return 0
}

type StockBoardEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                     int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Symbol                   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	MarketId                 string `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	BoardId                  string `protobuf:"bytes,4,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	BoardIdOriginal          string `protobuf:"bytes,5,opt,name=board_id_original,json=boardIdOriginal,proto3" json:"board_id_original,omitempty"`
	EventId                  string `protobuf:"bytes,6,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TradingScheduleControlId string `protobuf:"bytes,7,opt,name=trading_schedule_control_id,json=tradingScheduleControlId,proto3" json:"trading_schedule_control_id,omitempty"`
	TradingSessionId         string `protobuf:"bytes,8,opt,name=trading_session_id,json=tradingSessionId,proto3" json:"trading_session_id,omitempty"`
}

func (x *StockBoardEventMessage) Reset() {
	*x = StockBoardEventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockBoardEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockBoardEventMessage) ProtoMessage() {}

func (x *StockBoardEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockBoardEventMessage.ProtoReflect.Descriptor instead.
func (*StockBoardEventMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{7}
}

func (x *StockBoardEventMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StockBoardEventMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockBoardEventMessage) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *StockBoardEventMessage) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *StockBoardEventMessage) GetBoardIdOriginal() string {
	if x != nil {
		return x.BoardIdOriginal
	}
	return ""
}

func (x *StockBoardEventMessage) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *StockBoardEventMessage) GetTradingScheduleControlId() string {
	if x != nil {
		return x.TradingScheduleControlId
	}
	return ""
}

func (x *StockBoardEventMessage) GetTradingSessionId() string {
	if x != nil {
		return x.TradingSessionId
	}
	return ""
}

type AIBotSignalMessageMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64     `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"` // Unix timestamp
	Symbol      string    `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name        string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SignalTime  int64     `protobuf:"varint,4,opt,name=signal_time,json=signalTime,proto3" json:"signal_time,omitempty"` // Unix timestamp
	SignalPrice float64   `protobuf:"fixed64,5,opt,name=signal_price,json=signalPrice,proto3" json:"signal_price,omitempty"`
	Position    float64   `protobuf:"fixed64,6,opt,name=position,proto3" json:"position,omitempty"`
	Positions   []float64 `protobuf:"fixed64,7,rep,packed,name=positions,proto3" json:"positions,omitempty"` // Single float, not repeated
	Updated     int64     `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`             // Unix timestamp
	// Model config
	BookSize   float64 `protobuf:"fixed64,9,opt,name=book_size,json=bookSize,proto3" json:"book_size,omitempty"`
	RecallName string  `protobuf:"bytes,10,opt,name=recall_name,json=recallName,proto3" json:"recall_name,omitempty"`
	Freq       string  `protobuf:"bytes,11,opt,name=freq,proto3" json:"freq,omitempty"`
	// Current state at signal time
	CurrentAccountPosition float64 `protobuf:"fixed64,12,opt,name=current_account_position,json=currentAccountPosition,proto3" json:"current_account_position,omitempty"`
	CurrentMarketPrice     float64 `protobuf:"fixed64,13,opt,name=current_market_price,json=currentMarketPrice,proto3" json:"current_market_price,omitempty"`
	CurrentMarketTime      int64   `protobuf:"varint,14,opt,name=current_market_time,json=currentMarketTime,proto3" json:"current_market_time,omitempty"` // Unix timestamp
	AvgPrice               float64 `protobuf:"fixed64,15,opt,name=avg_price,json=avgPrice,proto3" json:"avg_price,omitempty"`
	// Previous state
	PrevSignalPrice float64 `protobuf:"fixed64,16,opt,name=prev_signal_price,json=prevSignalPrice,proto3" json:"prev_signal_price,omitempty"`
	PrevSignalTime  int64   `protobuf:"varint,17,opt,name=prev_signal_time,json=prevSignalTime,proto3" json:"prev_signal_time,omitempty"` // Unix timestamp
	PrevPosition    float64 `protobuf:"fixed64,18,opt,name=prev_position,json=prevPosition,proto3" json:"prev_position,omitempty"`
}

func (x *AIBotSignalMessageMessage) Reset() {
	*x = AIBotSignalMessageMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIBotSignalMessageMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIBotSignalMessageMessage) ProtoMessage() {}

func (x *AIBotSignalMessageMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIBotSignalMessageMessage.ProtoReflect.Descriptor instead.
func (*AIBotSignalMessageMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{8}
}

func (x *AIBotSignalMessageMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AIBotSignalMessageMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AIBotSignalMessageMessage) GetSignalTime() int64 {
	if x != nil {
		return x.SignalTime
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetSignalPrice() float64 {
	if x != nil {
		return x.SignalPrice
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetPosition() float64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetPositions() []float64 {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *AIBotSignalMessageMessage) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetBookSize() float64 {
	if x != nil {
		return x.BookSize
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetRecallName() string {
	if x != nil {
		return x.RecallName
	}
	return ""
}

func (x *AIBotSignalMessageMessage) GetFreq() string {
	if x != nil {
		return x.Freq
	}
	return ""
}

func (x *AIBotSignalMessageMessage) GetCurrentAccountPosition() float64 {
	if x != nil {
		return x.CurrentAccountPosition
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetCurrentMarketPrice() float64 {
	if x != nil {
		return x.CurrentMarketPrice
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetCurrentMarketTime() int64 {
	if x != nil {
		return x.CurrentMarketTime
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetPrevSignalPrice() float64 {
	if x != nil {
		return x.PrevSignalPrice
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetPrevSignalTime() int64 {
	if x != nil {
		return x.PrevSignalTime
	}
	return 0
}

func (x *AIBotSignalMessageMessage) GetPrevPosition() float64 {
	if x != nil {
		return x.PrevPosition
	}
	return 0
}

type UnknownMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"` // For debugging, can be used to log unexpected messages
}

func (x *UnknownMessage) Reset() {
	*x = UnknownMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownMessage) ProtoMessage() {}

func (x *UnknownMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownMessage.ProtoReflect.Descriptor instead.
func (*UnknownMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{9}
}

func (x *UnknownMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BotSignalMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      int64     `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"` // Unix timestamp
	Position  float64   `protobuf:"fixed64,2,opt,name=position,proto3" json:"position,omitempty"`
	Positions []float64 `protobuf:"fixed64,3,rep,packed,name=positions,proto3" json:"positions,omitempty"` // Single float, not repeated\
	Symbol    string    `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Strategy  string    `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Price     float64   `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	StopLoss  float64   `protobuf:"fixed64,7,opt,name=stop_loss,json=stopLoss,proto3" json:"stop_loss,omitempty"`
	Engine    string    `protobuf:"bytes,8,opt,name=engine,proto3" json:"engine,omitempty"`    // e.g., "AI-BOT", "TA-BOT", "MACD-BOT"
	Updated   int64     `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"` // Unix timestamp
}

func (x *BotSignalMessage) Reset() {
	*x = BotSignalMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotSignalMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotSignalMessage) ProtoMessage() {}

func (x *BotSignalMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotSignalMessage.ProtoReflect.Descriptor instead.
func (*BotSignalMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{10}
}

func (x *BotSignalMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BotSignalMessage) GetPosition() float64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *BotSignalMessage) GetPositions() []float64 {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *BotSignalMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BotSignalMessage) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *BotSignalMessage) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *BotSignalMessage) GetStopLoss() float64 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *BotSignalMessage) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *BotSignalMessage) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

var File_messages_proto protoreflect.FileDescriptor

var file_messages_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc7, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x14, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x62, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x62, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x62, 0x71, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x62, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x61, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x61, 0x71, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x61, 0x71, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x6b, 0x22, 0x7a, 0x0a, 0x10, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x76, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x76, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x75,
	0x79, 0x56, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x62, 0x75, 0x79, 0x56, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x22, 0xe0, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x69, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x65, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x76, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76,
	0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x63, 0x74, 0x22, 0xf0, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x6f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6e, 0x6f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x69, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x65, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x63, 0x74, 0x22, 0xb0, 0x02, 0x0a, 0x16, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf9, 0x04, 0x0a,
	0x19, 0x41, 0x49, 0x42, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x0e, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xf9, 0x01, 0x0a,
	0x10, 0x42, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x09, 0x5a, 0x07, 0x78, 0x70, 0x62, 0x3b,
	0x78, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData = file_messages_proto_rawDesc
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_proto_rawDescData)
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_messages_proto_goTypes = []interface{}{
	(*StockOHLCVMessage)(nil),         // 0: StockOHLCVMessage
	(*StockTopPriceMessage)(nil),      // 1: StockTopPriceMessage
	(*StockTickMessage)(nil),          // 2: StockTickMessage
	(*StockForeignMessage)(nil),       // 3: StockForeignMessage
	(*StockInfoMessage)(nil),          // 4: StockInfoMessage
	(*StockPriceBoardMessage)(nil),    // 5: StockPriceBoardMessage
	(*StockMarketIndexMessage)(nil),   // 6: StockMarketIndexMessage
	(*StockBoardEventMessage)(nil),    // 7: StockBoardEventMessage
	(*AIBotSignalMessageMessage)(nil), // 8: AIBotSignalMessageMessage
	(*UnknownMessage)(nil),            // 9: UnknownMessage
	(*BotSignalMessage)(nil),          // 10: BotSignalMessage
}
var file_messages_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockOHLCVMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockTopPriceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockTickMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockForeignMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockInfoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockPriceBoardMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockMarketIndexMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockBoardEventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIBotSignalMessageMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotSignalMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_rawDesc = nil
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
